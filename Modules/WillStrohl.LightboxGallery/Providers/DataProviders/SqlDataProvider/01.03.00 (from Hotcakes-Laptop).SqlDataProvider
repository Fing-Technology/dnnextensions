/*

INSTALL SQL PROVIDER SCRIPT

Lightbox Module for DotNetNuke
Version: 01.03.00
Author: Will Strohl
E-Mail: will.strohl@gmail.com
Website: http://www.willstrohl.com

Copyright 2010 Will Strohl

Release Notes:
  Adding support for re-ordering albums.

*/

IF NOT EXISTS (SELECT 1 FROM [dbo].[syscolumns] c JOIN [dbo].[sysobjects] o ON c.[id] = o.[id] WHERE c.[name] = N'DisplayOrder' AND o.[name] LIKE N'%wns_lightbox')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}wns_lightbox] ADD [DisplayOrder] INT NULL;
END

/* Update the old store procedures */

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_AddLightbox]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_AddLightbox];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_AddLightbox] 
	@ModuleId INT, @GalleryName NVARCHAR(50), @GalleryDescription NVARCHAR(500), @GalleryFolder NVARCHAR(50), @DisplayOrder INT 
AS 
BEGIN 
	SET NOCOUNT ON;
	IF NOT @DisplayOrder > 0
	BEGIN
	    SELECT @DisplayOrder = COUNT(l.[LightboxId]) FROM {databaseOwner}[{objectQualifier}wns_lightbox] l WHERE l.[ModuleId] = @ModuleId;
	    SET @DisplayOrder = @DisplayOrder + 1;
	END

	INSERT INTO {databaseOwner}[{objectQualifier}wns_lightbox] ([ModuleId],[GalleryName],[GalleryDescription],[GalleryFolder],[DisplayOrder]) 
	VALUES (@ModuleId, @GalleryName, @GalleryDescription, @GalleryFolder, @DisplayOrder);
	SELECT SCOPE_IDENTITY();
END
GO

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_UpdateLightbox]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_UpdateLightbox];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_UpdateLightbox] 
	@LightboxId INT, @ModuleId INT, @GalleryName NVARCHAR(50), @GalleryDescription NVARCHAR(500), @GalleryFolder NVARCHAR(50), @DisplayOrder INT 
AS 
BEGIN 
	SET NOCOUNT ON;
	IF NOT @DisplayOrder > 0
	BEGIN
	    SELECT @DisplayOrder = COUNT(l.[LightboxId]) FROM {databaseOwner}[{objectQualifier}wns_lightbox] l WHERE l.[ModuleId] = @ModuleId;
	    SET @DisplayOrder = @DisplayOrder + 1;
	END

	UPDATE {databaseOwner}[{objectQualifier}wns_lightbox] 
	SET [ModuleId] = @ModuleId,
		[GalleryName] = @GalleryName, 
		[GalleryDescription] = @GalleryDescription, 
		[GalleryFolder] = @GalleryFolder, 
		[DisplayOrder] = @DisplayOrder
	WHERE [LightboxId] = @LightboxId;
END
GO

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_GetLightboxes]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_GetLightboxes];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_GetLightboxes] 
	@ModuleId INT 
AS 
BEGIN 
	SET NOCOUNT ON
	SELECT l.[LightboxId],l.[ModuleId],l.[GalleryName],l.[GalleryDescription],l.[GalleryFolder],l.[DisplayOrder] 
	FROM {databaseOwner}[{objectQualifier}wns_lightbox] l 
	WHERE l.[ModuleId] = @ModuleId 
	ORDER BY l.[DisplayOrder], l.[GalleryName];
END
GO

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_GetLightbox]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_GetLightbox];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_GetLightbox] 
	@LightboxId INT 
AS 
BEGIN 
	SET NOCOUNT ON;
	SELECT l.[LightboxId],l.[ModuleId],l.[GalleryName],l.[GalleryDescription],l.[GalleryFolder],l.[DisplayOrder] 
	FROM {databaseOwner}[{objectQualifier}wns_lightbox] l 
	WHERE l.[LightboxId] = @LightboxId;
END
GO

/* Add New Stored Procedures */

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_GetLightboxCount]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_GetLightboxCount];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_GetLightboxCount] 
	@ModuleId INT 
AS 
BEGIN 
	SET NOCOUNT ON;
	SELECT COUNT(l.[LightboxId]) 
	FROM {databaseOwner}[{objectQualifier}wns_lightbox] l 
	WHERE l.[ModuleId] = @ModuleId;
END
GO

/*

POPULATE THE DISPLAY ORDER

*/

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_UpdateDisplayOrder]') IS NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_UpdateDisplayOrder];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_UpdateDisplayOrder]
AS
BEGIN

    IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}wns_lightbox] WHERE [DisplayOrder] IS NULL)
    BEGIN

        DECLARE @ModuleId INT;

        DECLARE [cLightbox] CURSOR FOR 
        SELECT l.[ModuleId] 
        FROM {databaseOwner}[{objectQualifier}wns_lightbox] l;

        OPEN [cLightbox];

        FETCH NEXT FROM [cLightbox] INTO @ModuleId;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            CREATE TABLE {databaseOwner}[{objectQualifier}wns_lightbox_TEMP] (
                [TempId] INT IDENTITY(1,1) NOT NULL, 
                [LightboxId] INT NOT NULL, 
                [ModuleId] INT NOT NULL
            );
            
            INSERT INTO {databaseOwner}[{objectQualifier}wns_lightbox_TEMP] ([LightboxId],[ModuleId]) 
            SELECT l.[LightboxId],l.[ModuleId] 
            FROM {databaseOwner}[{objectQualifier}wns_lightbox] l 
            WHERE l.[ModuleId] = @ModuleId 
            ORDER BY l.[ModuleId], l.[LightboxId];
            
            DECLARE @LightboxId INT, @TempId INT;
            DECLARE [cUpdate] CURSOR FOR
            SELECT l.[LightboxId], l.[TempId] 
            FROM {databaseOwner}[{objectQualifier}wns_lightbox_TEMP] l 
            WHERE l.[ModuleId] = @ModuleId;
            
            OPEN [cUpdate];
            
            FETCH NEXT FROM [cUpdate] INTO @LightboxId, @TempId;
            
            WHILE @@FETCH_STATUS = 0
            BEGIN
                UPDATE {databaseOwner}[{objectQualifier}wns_lightbox] 
                SET [DisplayOrder] = @TempId 
                WHERE [LightboxId] = @LightboxId;
                
                FETCH NEXT FROM [cUpdate] INTO @LightboxId, @TempId;
            END
            
            CLOSE [cUpdate];
            DEALLOCATE [cUpdate];
            
            DROP TABLE {databaseOwner}[{objectQualifier}wns_lightbox_TEMP];
                
            FETCH NEXT FROM [cLightbox] INTO @ModuleId;
        END

        CLOSE [cLightbox]; 
        DEALLOCATE [cLightbox];
    
    END

END
GO

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}wns_lightbox_DoesDisplayOrderNeedUpdate]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_DoesDisplayOrderNeedUpdate];
GO

SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}wns_lightbox_DoesDisplayOrderNeedUpdate] 
AS 
BEGIN 
	SET NOCOUNT ON;
	DECLARE @Count INT;
	SELECT @Count = COUNT(l.[LightboxId]) 
	FROM {databaseOwner}[{objectQualifier}wns_lightbox] l 
	WHERE l.[DisplayOrder] IS NULL;
	
	IF @Count > 1 
	    SELECT 1;
	ELSE
	    SELECT 0;
END
GO

/* END OF FILE */