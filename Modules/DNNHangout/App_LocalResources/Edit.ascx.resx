<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BasicSettings.Text" xml:space="preserve">
    <value>Update DNN Google Hangout Settings</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Edit Google Hangout Info</value>
  </data>
  <data name="cvDuration.ErrorMessage" xml:space="preserve">
    <value>The Duration must be between 1-60 if Minutes are chosen and between 1-8 if Hours are chosen.</value>
  </data>
  <data name="cvHangoutAddress.ErrorMessage" xml:space="preserve">
    <value>The Google Hangout Address did not match a pattern shown below and/or was not a valid URL. Check the video ID and make sure the URL exists.</value>
  </data>
  <data name="ddlDurationUnits.0.Text" xml:space="preserve">
    <value>Minutes</value>
  </data>
  <data name="ddlDurationUnits.1.Text" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="DNNHangoutHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="https://plus.google.com/hangouts/onair" target="_blank"&gt;Start a Hangout: On Air&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following are examples of acceptable URL's and/or embed codes for the Google Hangout Address field. We'll only be saving the video ID though.&lt;/p&gt;
&lt;p&gt;Video ID: N6kZAEs7uQ4&lt;br /&gt;
YouTube URL: http://www.youtube.com/watch?v=N6kZAEs7uQ4&lt;br /&gt;
YouTube Short URL: http://youtu.be/N6kZAEs7uQ4&lt;br /&gt;
Hangout Embed Code: &amp;lt;iframe width="420" height="315" src="http://www.youtube.com/embed/N6kZAEs7uQ4" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/DesktopModules/DNNHangout/Images/Help/Hangout-On-Air-01.png" target="_blank"&gt;Where do I find this before the hangout?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/DesktopModules/DNNHangout/Images/Help/Google-Hangout-Links.png" target="_blank"&gt;Where do I find this during the hangout?&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>Add the description of the event as you would like for visitors to see it above the hangout vdeo.</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Event Description</value>
  </data>
  <data name="lblDuration.Help" xml:space="preserve">
    <value>Enter in the number of minutes or hours that this event will last. (Google Hangouts are not allowed to last longer than 8 hours.)</value>
  </data>
  <data name="lblDuration.Text" xml:space="preserve">
    <value>Broadcast Duration</value>
  </data>
  <data name="lblDurationUnits.Help" xml:space="preserve">
    <value>Choose the units that the duration above reflects. (Google Hangouts are not allowed to last longer than 8 hours.)</value>
  </data>
  <data name="lblDurationUnits.Text" xml:space="preserve">
    <value>Duration Units</value>
  </data>
  <data name="lblHangoutAddress.Help" xml:space="preserve">
    <value>Copy the URL or embed code of the Google Hangout and paste it here.</value>
  </data>
  <data name="lblHangoutAddress.Text" xml:space="preserve">
    <value>Google Hangout Address</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>Choose the date and time that the event is scheduled to start. This will be displayed to visitors.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Start Date/Time</value>
  </data>
  <data name="lblTitle.Help" xml:space="preserve">
    <value>Enter the name of the event as you would want site visitors to see it.</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Title of Event</value>
  </data>
  <data name="lnkReturn.Text" xml:space="preserve">
    <value>Return to Module</value>
  </data>
  <data name="lnkUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="revDuration.ErrorMessage" xml:space="preserve">
    <value>The Duration can only contain numeric characters.</value>
  </data>
  <data name="rfvDuration.ErrorMessage" xml:space="preserve">
    <value>The Duration is required.</value>
  </data>
  <data name="rfvHangoutAddress.ErrorMessage" xml:space="preserve">
    <value>The Hangout Address is required.</value>
  </data>
  <data name="rfvStartDate.ErrorMessage" xml:space="preserve">
    <value>The Start Date is required.</value>
  </data>
  <data name="rfvTitle.ErrorMessage" xml:space="preserve">
    <value>The Hangout Title is required.</value>
  </data>
  <data name="lnkDelete.Confirm.Text" xml:space="preserve">
    <value>Are you sure that you want to delete this hangout?</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Delete Hangout</value>
  </data>
</root>